/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class com_threerings_froth_SteamController */

#ifndef _Included_com_threerings_froth_SteamController
#define _Included_com_threerings_froth_SteamController
#ifdef __cplusplus
extern "C" {
#endif
#undef com_threerings_froth_SteamController_MAX_STEAM_CONTROLLERS
#define com_threerings_froth_SteamController_MAX_STEAM_CONTROLLERS 16L
/*
 * Class:     com_threerings_froth_SteamController
 * Method:    init
 * Signature: (Ljava/lang/String;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_threerings_froth_SteamController_init
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_threerings_froth_SteamController
 * Method:    shutdown
 * Signature: ()Z
 */
JNIEXPORT jboolean JNICALL Java_com_threerings_froth_SteamController_shutdown
  (JNIEnv *, jclass);

/*
 * Class:     com_threerings_froth_SteamController
 * Method:    getControllerState
 * Signature: (ILcom/threerings/froth/SteamController$State;)Z
 */
JNIEXPORT jboolean JNICALL Java_com_threerings_froth_SteamController_getControllerState
  (JNIEnv *, jclass, jint, jobject);

/*
 * Class:     com_threerings_froth_SteamController
 * Method:    setOverrideMode
 * Signature: (Ljava/lang/String;)V
 */
JNIEXPORT void JNICALL Java_com_threerings_froth_SteamController_setOverrideMode
  (JNIEnv *, jclass, jstring);

/*
 * Class:     com_threerings_froth_SteamController
 * Method:    nativeTriggerHapticPulse
 * Signature: (IIS)V
 */
JNIEXPORT void JNICALL Java_com_threerings_froth_SteamController_nativeTriggerHapticPulse
  (JNIEnv *, jclass, jint, jint, jshort);

#ifdef __cplusplus
}
#endif
#endif
